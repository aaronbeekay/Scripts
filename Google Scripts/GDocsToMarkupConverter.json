{"files":[{"id":"9c189b24-8ff8-4dad-b737-9b283485cb5a","name":"ConversionsToMarkup","type":"server_js","source":"// Script-as-app template.\nfunction doGet() {\n  var app \u003d UiApp.createApplication();\n  app.setTitle(\"GDocs to Markup Converter\");\n  var panel \u003d app.createVerticalPanel();\n  var textbox \u003d app.createTextBox();\n  textbox.setName(\"GDA\").setId(\"GDA\");\n  var button \u003d app.createButton(\u0027Run\u0027);\n  \n  panel.add(textbox);\n  panel.add(button);\n  app.add(panel);\n\n  /*\n  var label \u003d app.createLabel(\u0027The button was clicked.\u0027)\n                 .setId(\u0027statusLabel\u0027)\n                 .setVisible(false);\n  app.add(label);\n  */\n  var handler \u003d app.createServerHandler(\u0027myClickHandler\u0027);\n  handler.addCallbackElement(panel);\n  button.addClickHandler(handler);\n\n  return app;\n}\n\nfunction myClickHandler(e) {\n  var app \u003d UiApp.getActiveApplication();\n  var address \u003d e.parameter.GDA;\n\n  convertToMarkup(address);\n  //app.close();\n  return app;\n}\n\n\nfunction convertToMarkup(address) {\n  /*\n  var title \u003d \u0027Script Center Report\u0027;\n  var summaryContents \u003d \u0027This reports addresses...\u0027;\n  var overviewContents \u003d \u0027We undertook this project because...\u0027;\n  var dataContents \u003d \u0027We collected three samples of data...\u0027;\n  */\n  \n  var doc \u003d DocumentApp.openByUrl(address);\n  var body \u003d doc.getBody();\n  var text \u003d body.editAsText();\n  body.appendParagraph(\u0027\\n\u0027);\n  convertElementToMarkup(body, text);\n\n}\n\n/**\n* Recursively searches down from the start of the document and searches for\n* specific styles and element. Copies the text and replaces the styles with\n* wiki tags at the bottom of the page\n*/\nfunction convertElementToMarkup(currentElement, text) {\n  currentElement \u003d arguments[0];\n  text \u003d arguments[1];\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.BODY_SECTION) {\n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n    }\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.PARAGRAPH) {\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING1) {\n      text.appendText(\u0027\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING2) {\n      text.appendText(\u0027\u003d\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING3) {\n      text.appendText(\u0027\u003d\u003d\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING4) {\n      text.appendText(\u0027\u003d\u003d\u003d\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING5) {\n      text.appendText(\u0027\u003d\u003d\u003d\u003d\u003d\u003d\u0027);\n    }\n    \n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n    }\n    \n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING1) {\n      text.appendText(\u0027\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING2) {\n      text.appendText(\u0027\u003d\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING3) {\n      text.appendText(\u0027\u003d\u003d\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING4) {\n      text.appendText(\u0027\u003d\u003d\u003d\u003d\u003d\u0027);\n    }\n    if(currentElement.getHeading() \u003d\u003d DocumentApp.ParagraphHeading.HEADING5) {\n      text.appendText(\u0027\u003d\u003d\u003d\u003d\u003d\u003d\u0027);\n    }\n    text.appendText(\u0027\\n\u0027);\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.LIST_ITEM) {\n    text.appendText(\u0027 # \u0027);\n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n    }\n    text.appendText(\u0027\\n\u0027);\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.TABLE) {\n    text.appendText(\u0027{| class\u003d\"wikitable\"\\n\u0027);\n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n      if(i \u003c numChildren-1) {\n        text.appendText(\u0027|-\\n\u0027);\n      }\n    }\n    text.appendText(\u0027|}\\n\u0027);\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.TABLE_ROW) {\n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n    }\n    \n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.TABLE_CELL) {\n    text.appendText(\u0027|\\n\u0027);\n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n    }\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.EQUATION) {\n    text.appendText(\u0027\u003cmath\u003e\u0027);\n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n    }\n    text.appendText(\u0027\u003c/math\u003e\u0027);\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.EQUATION_FUNCTION) {\n    if(currentElement.getCode() !\u003d \u0027\\\\superscript\u0027 \u0026\u0026 currentElement.getCode() !\u003d \u0027\\\\subscript\u0027) {\n      text.appendText(currentElement.getCode() + \u0027 \u0027); \n    }\n    text.appendText(\u0027{\u0027);\n    var numChildren \u003d currentElement.getNumChildren();\n    for(var i \u003d 0; i \u003c numChildren; i++) {\n      convertElementToMarkup(currentElement.getChild(i),text);\n    }\n    text.appendText(\u0027}\u0027);\n    \n    if(currentElement.getCode() \u003d\u003d \u0027\\\\superscript\u0027 || currentElement.getCode() \u003d\u003d \u0027\\\\superscript\u0027) {\n      for(var i \u003d text.getText().length-1; i \u003e\u003d 0; i--) {\n        if(text.getText().charAt(i) \u003d\u003d \u0027{\u0027) {\n          text.insertText(i,\u0027^\u0027);\n          break;\n        }\n      }\n    }\n    else if(currentElement.getCode() \u003d\u003d \u0027\\\\superscript\u0027 || currentElement.getCode() \u003d\u003d \u0027\\\\subscript\u0027) {\n      for(var i \u003d text.getText().length-1; i \u003e\u003d 0; i--) {\n        if(text.getText().charAt(i) \u003d\u003d \u0027{\u0027) {\n          text.insertText(i,\u0027_\u0027);\n          break;\n        }\n      }\n    }\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.EQUATION_FUNCTION_ARGUMENT_SEPARATOR) {\n    text.appendText(\u0027}{\u0027);\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.EQUATION_SYMBOL) {\n    text.appendText(currentElement.getCode() + \u0027 \u0027);\n  }\n     \n  //Three cases where we can\u0027t call getNumChildrens since these are end of the tree nodes\n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.INLINE_IMAGE) {\n    //Get image URL if available\n    //Write text string in wiki markdown format\n    text.appendText(\u0027[\u0027 + currentElement.getLinkUrl() + \u0027]\u0027);\n    return currentElement;\n  }\n    \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.TEXT) {\n    //Convert text to wiki format\n    searchResult \u003d null;\n    var startingLength \u003d text.getText().length;\n    \n    if(currentElement.isBold() \u003d\u003d true) {\n      text.appendText(\"\u0027\u0027\u0027\");\n    }\n    if(currentElement.isItalic() \u003d\u003d true) {\n      text.appendText(\"\u0027\u0027\");\n    }\n    if(currentElement.isUnderline() \u003d\u003d true) {\n      text.appendText(\u0027\u003cu\u003e\u0027);\n    }\n    if(currentElement.getLinkUrl() !\u003d null) {\n      if(currentElement.getLinkUrl().charAt(0) \u003d\u003d \u0027#\u0027) {\n        text.appendText(\u0027[[#\u0027);\n      }\n    }\n    \n    text.appendText(currentElement.getText());\n    \n    if(currentElement.getLinkUrl() !\u003d null) {\n      text.appendText(\u0027]]\u0027); \n    }\n    if(currentElement.isUnderline() \u003d\u003d true) {\n      text.appendText(\u0027\u003c/u\u003e\u0027);\n    }\n    if(currentElement.isItalic() \u003d\u003d true) {\n      text.appendText(\"\u0027\u0027\");\n    }\n    if(currentElement.isBold() \u003d\u003d true) {\n      text.appendText(\"\u0027\u0027\u0027\");\n    }\n    return currentElement;\n  }\n  \n  if(currentElement.getType() \u003d\u003d DocumentApp.ElementType.PAGE_BREAK) {\n    return currentElement;\n  }\n  return currentElement;\n}"}]}